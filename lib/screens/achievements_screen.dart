import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../models/achievement.dart';
import '../services/achievements_service.dart';
import '../providers/achievements_provider.dart';
import '../providers/user_settings_provider.dart';

/// –≠–∫—Ä–∞–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
class AchievementsScreen extends ConsumerStatefulWidget {
  const AchievementsScreen({Key? key}) : super(key: key);

  @override
  ConsumerState<AchievementsScreen> createState() => _AchievementsScreenState();
}

class _AchievementsScreenState extends ConsumerState<AchievementsScreen> {
  bool _hasInitialized = false; // üéØ –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

  @override
  void initState() {
    super.initState();
    
    // üöÄ –°–¢–†–û–ì–ê–Ø –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¢–û–õ–¨–ö–û –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞
    if (!_hasInitialized) {
      _hasInitialized = true;
      
             WidgetsBinding.instance.addPostFrameCallback((_) async {
               if (mounted) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–∂–µ—Ç –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                 final userSettings = ref.read(userSettingsProvider);
                 final dailyNormML = userSettings?.dailyNormML ?? 2000;
                 final service = ref.read(achievementsServiceProvider);
                 
                debugPrint('üéØ –°–¢–†–û–ì–ê–Ø –û–î–ù–û–ö–†–ê–¢–ù–ê–Ø –ê–í–¢–û–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
                await service.initialize(dailyNormML: dailyNormML, forceReset: false);
                
                // üéñÔ∏è XP –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
                debugPrint('üéñÔ∏è XP –Ω–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${service.userXp} XP');
               }
             });
    }
  }

  @override
  Widget build(BuildContext context) {
    // üöÄ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    final service = ref.watch(achievementsServiceProvider);
    final userSettings = ref.watch(userSettingsProvider);

    return Scaffold(
      appBar: AppBar(
        title: const Text('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', style: TextStyle(color: Colors.white)),
        backgroundColor: const Color(0xFF1976D2),
        elevation: 0,
        // üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –±–µ–∑ —Ä—É—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        actions: const [],
      ),
      body: _buildContent(context, service),
    );
  }

  Widget _buildContent(BuildContext context, AchievementsService service) {
    // üöÄ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã
    if (service.achievements.isEmpty) {
      return Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Color(0xFF1976D2), Color(0xFF64B5F6), Colors.white],
            stops: [0.0, 0.3, 1.0],
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.only(top: 60), // üì∫ –û—Ç—Å—Ç—É–ø –ø–æ–¥ –≥–ª–æ–±–∞–ª—å–Ω—ã–π MyTarget –±–∞–Ω–Ω–µ—Ä
          child: const Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                CircularProgressIndicator(color: Colors.white),
                SizedBox(height: 20),
                Text('üßπ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...', 
                  style: TextStyle(color: Colors.white, fontSize: 18, fontWeight: FontWeight.bold)),
                SizedBox(height: 10),
                Text('–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º!', 
                  style: TextStyle(color: Colors.white70, fontSize: 14)),
              ],
            ),
          ),
        ),
      );
    }

    return Container(
      decoration: const BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
          colors: [Color(0xFF1976D2), Color(0xFF64B5F6), Colors.white],
          stops: [0.0, 0.3, 1.0],
        ),
      ),
      child: Column(
        children: [
          // üì∫ –û—Ç—Å—Ç—É–ø –ø–æ–¥ –≥–ª–æ–±–∞–ª—å–Ω—ã–π MyTarget –±–∞–Ω–Ω–µ—Ä
          const SizedBox(height: 76),
          
          // üë§ –§–ò–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø –∫–∞—Ä—Ç–æ—á–∫–∞ "–ú–∞—Å—Ç–µ—Ä –≥–∏–¥—Ä–∞—Ü–∏–∏"
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: _buildUserCard(service),
          ),
          
          const SizedBox(height: 20),
          
          // üìä –°–ö–†–û–õ–õ–ò–†–£–ï–ú–´–ô –∫–æ–Ω—Ç–µ–Ω—Ç
          Expanded(
            child: SingleChildScrollView(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              child: Column(
                children: [
                  // –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                  _buildStatsRow(service),
                  const SizedBox(height: 20),
                  
                  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º
                  _buildAchievementsByType('üéØ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ', AchievementType.daily, service),
                  _buildAchievementsByType('üî• –°–µ—Ä–∏–∏ –¥–Ω–µ–π', AchievementType.streak, service),
                  _buildAchievementsByType('üåä –ü–æ –æ–±—ä–µ–º—É', AchievementType.volume, service),
                  _buildAchievementsByType('‚è∞ –ü—Ä–∏–≤—ã—á–∫–∏', AchievementType.habit, service),
                  
                  const SizedBox(height: 100), // –æ—Ç—Å—Ç—É–ø –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  /// –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—Ä–æ–≤–Ω–µ–º –∏ XP
  Widget _buildUserCard(AchievementsService service) {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF6A11CB), Color(0xFF2575FC)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.2),
            blurRadius: 15,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: Column(
        children: [
          // –ò–∫–æ–Ω–∫–∞ –∏ —É—Ä–æ–≤–µ–Ω—å
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(15),
                ),
                child: const Icon(Icons.person, color: Colors.white, size: 30),
              ),
              const SizedBox(width: 15),
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text('–ú–∞—Å—Ç–µ—Ä –≥–∏–¥—Ä–∞—Ü–∏–∏', 
                    style: TextStyle(color: Colors.white, fontSize: 18, fontWeight: FontWeight.bold)),
                  Text('–£—Ä–æ–≤–µ–Ω—å ${service.userLevel}', 
                    style: TextStyle(color: Colors.white.withOpacity(0.9), fontSize: 14)),
                ],
              ),
              const Spacer(),
              Text('${service.userXp} XP', 
                style: const TextStyle(color: Colors.white, fontSize: 16, fontWeight: FontWeight.w600)),
            ],
          ),
          
          const SizedBox(height: 15),
          
          // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text('–î–æ —É—Ä–æ–≤–Ω—è ${service.userLevel + 1}', 
                    style: TextStyle(color: Colors.white.withOpacity(0.9), fontSize: 12)),
                  Text('${service.nextLevelXp - (service.userXp % service.nextLevelXp)} XP', 
                    style: TextStyle(color: Colors.white.withOpacity(0.9), fontSize: 12)),
                ],
              ),
              const SizedBox(height: 8),
              LinearProgressIndicator(
                value: service.levelProgress,
                backgroundColor: Colors.white.withOpacity(0.3),
                valueColor: const AlwaysStoppedAnimation<Color>(Colors.white),
                minHeight: 8,
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ
  Widget _buildStatsRow(AchievementsService service) {
    return Row(
      children: [
        Expanded(child: _buildStatCard('–í—ã–ø–æ–ª–Ω–µ–Ω–æ', '${service.completedAchievements.length}', Icons.emoji_events, Colors.amber)),
        const SizedBox(width: 12),
        Expanded(child: _buildStatCard('–ê–∫—Ç–∏–≤–Ω—ã–µ', '${service.activeAchievements.length}', Icons.trending_up, Colors.blue)),
        const SizedBox(width: 12),
        Expanded(child: _buildStatCard('–°–µ—Ä–∏—è –¥–Ω–µ–π', '${service.currentStreak}', Icons.local_fire_department, Colors.red)),
      ],
    );
  }

  Widget _buildStatCard(String label, String value, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(15),
        boxShadow: [
          BoxShadow(color: Colors.black.withOpacity(0.1), blurRadius: 10, offset: const Offset(0, 4)),
        ],
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 24),
          const SizedBox(height: 8),
          Text(value, style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: color)),
          Text(label, style: TextStyle(fontSize: 12, color: Colors.grey[600])),
        ],
      ),
    );
  }

  /// –ì—Ä—É–ø–ø–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É
  Widget _buildAchievementsByType(String title, AchievementType type, AchievementsService service) {
    final achievements = service.achievements.where((a) => a.type == type).toList();
    if (achievements.isEmpty) return const SizedBox.shrink();

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.symmetric(vertical: 16),
          child: Text(title, style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
        ),
        ...achievements.map((achievement) => _buildAchievementCard(achievement)),
      ],
    );
  }

  /// –ö–∞—Ä—Ç–æ—á–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  Widget _buildAchievementCard(Achievement achievement) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 300),
        decoration: BoxDecoration(
          gradient: achievement.isCompleted
            ? LinearGradient(colors: [achievement.color.withOpacity(0.3), Colors.white])
            : const LinearGradient(colors: [Colors.white, Colors.white]),
          borderRadius: BorderRadius.circular(20),
          border: achievement.isCompleted 
            ? Border.all(color: achievement.color, width: 2)
            : Border.all(color: Colors.grey.shade300),
          boxShadow: [
            BoxShadow(
              color: achievement.isCompleted 
                ? achievement.color.withOpacity(0.3)
                : Colors.black.withOpacity(0.1),
              blurRadius: achievement.isCompleted ? 15 : 10,
              offset: const Offset(0, 5),
            ),
          ],
        ),
        child: Padding(
          padding: const EdgeInsets.all(20),
          child: Column(
            children: [
              // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π
              Row(
                children: [
                  // –ò–∫–æ–Ω–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: achievement.color.withOpacity(0.2),
                      borderRadius: BorderRadius.circular(15),
                    ),
                    child: Icon(achievement.icon, color: achievement.color, size: 24),
                  ),
                  const SizedBox(width: 15),
                  
                  // –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(achievement.title, 
                          style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
                        Text(achievement.description, 
                          style: TextStyle(fontSize: 14, color: Colors.grey[600])),
                      ],
                    ),
                  ),
                  
                  // üéñÔ∏è XP –∏ —Å—Ç–∞—Ç—É—Å –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.end,
                    children: [
                      Text('${achievement.reward} XP', 
                        style: TextStyle(color: achievement.color, fontSize: 14, fontWeight: FontWeight.bold)),
                      
                      if (achievement.isCompleted) ...[
                        const SizedBox(height: 4),
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                          decoration: BoxDecoration(
                            color: achievement.color,
                            borderRadius: BorderRadius.circular(10),
                          ),
                          child: const Text('‚úì', 
                            style: TextStyle(color: Colors.white, fontSize: 10, fontWeight: FontWeight.bold)),
                        ),
                      ],
                    ],
                  ),
                ],
              ),
              
              const SizedBox(height: 15),
              
              // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (–µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ)
              if (!achievement.isCompleted) ...[
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text('${achievement.currentValue}/${achievement.targetValue}', 
                      style: const TextStyle(fontSize: 12, fontWeight: FontWeight.w500)),
                    Text('${(achievement.progress * 100).toInt()}%', 
                      style: TextStyle(color: achievement.color, fontSize: 12, fontWeight: FontWeight.bold)),
                  ],
                ),
                const SizedBox(height: 8),
                LinearProgressIndicator(
                  value: achievement.progress,
                  backgroundColor: Colors.grey[300],
                  valueColor: AlwaysStoppedAnimation<Color>(achievement.color),
                  minHeight: 8,
                ),
              ] else ...[
                // –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                if (achievement.completedAt != null)
                  Text('–í—ã–ø–æ–ª–Ω–µ–Ω–æ ${_formatDate(achievement.completedAt!)}', 
                    style: TextStyle(color: Colors.grey[600], fontSize: 12)),
              ],
            ],
          ),
        ),
      ),
    );
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  String _formatDate(DateTime date) {
    final months = ['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '–∏—é–Ω',
                   '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫'];
    return '${date.day} ${months[date.month - 1]} ${date.year}';
  }
}
