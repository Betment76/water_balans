import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:table_calendar/table_calendar.dart';
import 'package:intl/intl.dart';
import 'package:fl_chart/fl_chart.dart';

import '../constants/app_colors.dart';
import '../models/water_intake.dart';
import '../models/user_settings.dart';
import '../providers/user_settings_provider.dart';
import '../services/storage_service.dart';
import '../widgets/banner_ad_widget.dart';

class CalendarStatsScreen extends ConsumerStatefulWidget {
  const CalendarStatsScreen({super.key});

  @override
  ConsumerState<CalendarStatsScreen> createState() => _CalendarStatsScreenState();
}

class _CalendarStatsScreenState extends ConsumerState<CalendarStatsScreen> {
  DateTime _selectedDate = DateTime.now();
  DateTime _focusedDate = DateTime.now();
  List<WaterIntake> _dayIntakes = [];
  Map<DateTime, int> _monthlyData = {};
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _initializeLocale();
    _loadDayStats();
    _loadMonthlyData();
  }

  /// üá∑üá∫ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  void _initializeLocale() {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    Intl.defaultLocale = 'ru_RU';
  }

  /// üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
  Future<void> _loadDayStats() async {
    try {
      setState(() => _isLoading = true);
      
      final intakes = await StorageService.getWaterIntakesForDate(_selectedDate);
      
      setState(() {
        _dayIntakes = intakes;
        _isLoading = false;
      });
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–Ω—è: $e');
      setState(() {
        _isLoading = false;
      });
    }
  }

  /// üìÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  Future<void> _loadMonthlyData() async {
    try {
      final monthData = <DateTime, int>{};
      final startOfMonth = DateTime(_focusedDate.year, _focusedDate.month, 1);
      final endOfMonth = DateTime(_focusedDate.year, _focusedDate.month + 1, 0);
      
      for (DateTime date = startOfMonth; date.isBefore(endOfMonth.add(const Duration(days: 1))); date = date.add(const Duration(days: 1))) {
        final intakes = await StorageService.getWaterIntakesForDate(date);
        final total = intakes.fold(0, (sum, intake) => sum + intake.volumeML);
        if (total > 0) {
          monthData[DateTime(date.year, date.month, date.day)] = total;
        }
      }
      
      setState(() {
        _monthlyData = monthData;
      });
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: $e');
    }
  }

  /// üìä –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–Ω—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–æ–¥—ã
  Color _getDayColor(DateTime day, int dailyGoal) {
    final amount = _monthlyData[DateTime(day.year, day.month, day.day)] ?? 0;
    if (amount == 0) return Colors.grey.shade100;
    
    final percentage = amount / dailyGoal;
    if (percentage >= 1.0) return Colors.green.shade300; // –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
    if (percentage >= 0.75) return Colors.blue.shade400; // –ë–æ–ª—å—à–µ 3/4
    if (percentage >= 0.5) return Colors.blue.shade300; // –ü–æ–ª–æ–≤–∏–Ω–∞
    return Colors.blue.shade100; // –ú–∞–ª–æ –≤–æ–¥—ã
  }

  @override
  Widget build(BuildContext context) {
    final userSettings = ref.watch(userSettingsProvider);
    final dailyGoal = userSettings?.dailyNormML ?? 2000;
    final totalDay = _dayIntakes.fold(0, (sum, intake) => sum + intake.volumeML);

    return Scaffold(
      appBar: AppBar(
        title: const Text('üìä –ö–∞–ª–µ–Ω–¥–∞—Ä—å-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 
          style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
        centerTitle: true,
        backgroundColor: const Color(0xFF1976D2),
        elevation: 0,
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Color(0xFF1976D2), Color(0xFF64B5F6), Colors.white],
            stops: [0.0, 0.3, 1.0],
          ),
        ),
        child: Column(
          children: [
            // üì∫ –û—Ç—Å—Ç—É–ø –ø–æ–¥ –≥–ª–æ–±–∞–ª—å–Ω—ã–π MyTarget –±–∞–Ω–Ω–µ—Ä (50px + –æ—Ç—Å—Ç—É–ø—ã)
            const SizedBox(height: 60),
            
            // üóìÔ∏è –ö–ê–õ–ï–ù–î–ê–†–¨ (–≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å)
            Container(
              margin: const EdgeInsets.all(16),
              padding: const EdgeInsets.only(top: 12, left: 20, right: 20, bottom: 20), // üîº –£–º–µ–Ω—å—à–∏–ª –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(25),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.1),
                    blurRadius: 20,
                    offset: const Offset(0, 10),
                  ),
                ],
              ),
              child: TableCalendar<int>(
                locale: 'ru_RU',
                firstDay: DateTime.now().subtract(const Duration(days: 365)),
                lastDay: DateTime.now(),
                focusedDay: _focusedDate,
                selectedDayPredicate: (day) => isSameDay(_selectedDate, day),
                
                rowHeight: 30.0,
                
                calendarStyle: CalendarStyle(
                  outsideDaysVisible: false,
                  cellMargin: const EdgeInsets.symmetric(horizontal: 2.0, vertical: 0),
                  cellPadding: const EdgeInsets.all(0),
                  rowDecoration: const BoxDecoration(),
                  weekendTextStyle: const TextStyle(color: kBlue, fontSize: 14),
                  holidayTextStyle: const TextStyle(color: Colors.red, fontSize: 14),
                  defaultTextStyle: const TextStyle(fontSize: 14),
                  selectedDecoration: BoxDecoration(
                    color: kBlue,
                    borderRadius: BorderRadius.circular(6),
                  ),
                  todayDecoration: BoxDecoration(
                    color: kBlue.withOpacity(0.5),
                    borderRadius: BorderRadius.circular(6),
                  ),
                  markerDecoration: BoxDecoration(
                    color: Colors.green,
                    borderRadius: BorderRadius.circular(6),
                  ),
                ),
                
                headerStyle: const HeaderStyle(
                  formatButtonVisible: false,
                  titleCentered: true,
                  headerPadding: EdgeInsets.only(top: 0, bottom: 2), // üîº –£–±—Ä–∞–ª –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –æ—Ç –º–µ—Å—è—Ü–∞
                  headerMargin: EdgeInsets.only(top: 0, bottom: 2), // üîº –ü–æ–¥–Ω—è–ª –º–µ—Å—è—Ü –µ—â—ë –≤—ã—à–µ
                  titleTextStyle: TextStyle(
                    color: kBlue,
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),

                daysOfWeekStyle: const DaysOfWeekStyle(
                  weekdayStyle: TextStyle(color: kBlue, fontWeight: FontWeight.w600, fontSize: 12),
                  weekendStyle: TextStyle(color: kBlue, fontWeight: FontWeight.w600, fontSize: 12),
                  decoration: BoxDecoration(),
                ),

                startingDayOfWeek: StartingDayOfWeek.monday,
                
                calendarBuilders: CalendarBuilders(
                  defaultBuilder: (context, day, focusedDay) {
                    final dayKey = DateTime(day.year, day.month, day.day);
                    final amount = _monthlyData[dayKey] ?? 0;
                    final color = _getDayColor(day, dailyGoal);
                    
                    return Container(
                      height: 26,
                      decoration: BoxDecoration(
                        color: color,
                        borderRadius: BorderRadius.circular(6),
                      ),
                      child: Center(
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Text(
                              '${day.day}',
                              style: TextStyle(
                                color: amount > 0 ? kBlue : Colors.grey.shade600,
                                fontWeight: amount > 0 ? FontWeight.bold : FontWeight.normal,
                                fontSize: 13,
                              ),
                            ),
                            if (amount > 0) ...[
                              const SizedBox(width: 2),
                              Container(
                                width: 3,
                                height: 3,
                                decoration: BoxDecoration(
                                  color: kBlue,
                                  borderRadius: BorderRadius.circular(1.5),
                                ),
                              ),
                            ],
                          ],
                        ),
                      ),
                    );
                  },
                  selectedBuilder: (context, day, focusedDay) {
                    final dayKey = DateTime(day.year, day.month, day.day);
                    final amount = _monthlyData[dayKey] ?? 0;
                    
                    return Container(
                      height: 28,
                      decoration: BoxDecoration(
                        color: kBlue,
                        borderRadius: BorderRadius.circular(6),
                      ),
                      child: Center(
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Text(
                              '${day.day}',
                              style: const TextStyle(
                                color: kWhite,
                                fontWeight: FontWeight.bold,
                                fontSize: 13,
                              ),
                            ),
                            if (amount > 0) ...[
                              const SizedBox(width: 2),
                              Container(
                                width: 3,
                                height: 3,
                                decoration: BoxDecoration(
                                  color: kWhite,
                                  borderRadius: BorderRadius.circular(1.5),
                                ),
                              ),
                            ],
                          ],
                        ),
                      ),
                    );
                  },
                  todayBuilder: (context, day, focusedDay) {
                    final dayKey = DateTime(day.year, day.month, day.day);
                    final amount = _monthlyData[dayKey] ?? 0;
                    final color = _getDayColor(day, dailyGoal);
                    
                    return Container(
                      height: 28,
                      decoration: BoxDecoration(
                        color: color,
                        borderRadius: BorderRadius.circular(6),
                        border: Border.all(color: kBlue, width: 2),
                      ),
                      child: Center(
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Text(
                              '${day.day}',
                              style: const TextStyle(
                                color: kBlue,
                                fontWeight: FontWeight.bold,
                                fontSize: 13,
                              ),
                            ),
                            if (amount > 0) ...[
                              const SizedBox(width: 2),
                              Container(
                                width: 3,
                                height: 3,
                                decoration: BoxDecoration(
                                  color: kBlue,
                                  borderRadius: BorderRadius.circular(1.5),
                                ),
                              ),
                            ],
                          ],
                        ),
                      ),
                    );
                  },
                ),
                
                onDaySelected: (selectedDay, focusedDay) {
                  setState(() {
                    _selectedDate = selectedDay;
                    _focusedDate = focusedDay;
                  });
                  _loadDayStats();
                },
                
                onPageChanged: (focusedDay) {
                  setState(() {
                    _focusedDate = focusedDay;
                  });
                  _loadMonthlyData();
                },
                
                onHeaderTapped: (focusedDay) {
                  _showMonthStatistics(focusedDay);
                },
              ),
            ),
          
            // üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ù–Ø (–Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å)
            Expanded(
              child: _isLoading 
                ? Container(
                    margin: const EdgeInsets.all(16),
                    padding: const EdgeInsets.all(40),
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(25),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.1),
                          blurRadius: 20,
                          offset: const Offset(0, 10),
                        ),
                      ],
                    ),
                    child: const Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          CircularProgressIndicator(color: Color(0xFF1976D2)),
                          SizedBox(height: 16),
                          Text('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...', 
                            style: TextStyle(color: Color(0xFF1976D2), fontSize: 16)),
                        ],
                      ),
                    ),
                  )
                : SingleChildScrollView(
                    padding: EdgeInsets.zero,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        _buildDayHeader(totalDay, dailyGoal),
                        const SizedBox(height: 4),
                        
                        if (_dayIntakes.isNotEmpty) ...[
                          _buildDayChart(),
                          const SizedBox(height: 4),
                          
                          _buildDayStats(totalDay, dailyGoal),
                          const SizedBox(height: 4),
                          
                          _buildDayIntakesList(),
                        ] else
                          _buildEmptyDayState(),
                      ],
                    ),
                  ),
            ),
          ],
        ),
      ),
    );
  }

  /// üéØ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
  Widget _buildDayHeader(int totalDay, int dailyGoal) {
    final percentage = totalDay / dailyGoal;
    final isToday = isSameDay(_selectedDate, DateTime.now());
    
    String dateText;
    if (isToday) {
      dateText = 'üóìÔ∏è –°–µ–≥–æ–¥–Ω—è';
    } else if (isSameDay(_selectedDate, DateTime.now().subtract(const Duration(days: 1)))) {
      dateText = 'üóìÔ∏è –í—á–µ—Ä–∞';
    } else {
      dateText = 'üóìÔ∏è ${_selectedDate.day}.${_selectedDate.month.toString().padLeft(2, '0')}.${_selectedDate.year}';
    }

    String statusText = '';
    Color statusColor = kBlue;
    IconData statusIcon = Icons.water_drop;
    
    if (totalDay >= dailyGoal) {
      statusText = 'üéâ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!';
      statusColor = Colors.green;
      statusIcon = Icons.check_circle;
    } else if (totalDay >= dailyGoal * 0.75) {
      statusText = 'üí™ –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!';
      statusColor = kBlue;
      statusIcon = Icons.trending_up;
    } else if (totalDay >= dailyGoal * 0.5) {
      statusText = 'üìà –ü–æ–ª–æ–≤–∏–Ω–∞ –ø—É—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞!';
      statusColor = kBlue; // üîµ –ò–∑–º–µ–Ω–∏–ª —Å –æ—Ä–∞–Ω–∂–µ–≤–æ–≥–æ –Ω–∞ —Å–∏–Ω–∏–π
      statusIcon = Icons.water_drop;
    } else {
      statusText = 'üíß –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!';
      statusColor = kBlue;
      statusIcon = Icons.water_drop;
    }

    return Container(
      margin: const EdgeInsets.all(16),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(25),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 20,
            offset: const Offset(0, 10),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.calendar_today, color: statusColor, size: 24),
              const SizedBox(width: 12),
              Text(dateText, style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: kBlue)),
            ],
          ),
          const SizedBox(height: 16),
          
          Text('$totalDay –º–ª –∏–∑ $dailyGoal –º–ª (${(percentage * 100).toInt()}%)', 
            style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: statusColor)),
          
          const SizedBox(height: 16),
          Row(
            children: [
              Icon(statusIcon, color: statusColor, size: 20),
              const SizedBox(width: 8),
              Text(statusText, style: TextStyle(fontSize: 16, color: statusColor, fontWeight: FontWeight.w600)),
            ],
          ),
        ],
      ),
    );
  }

  /// üìà –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
  Widget _buildDayChart() {
    if (_dayIntakes.isEmpty) return const SizedBox.shrink();
    
    final now = DateTime.now();
    final currentHour = now.hour;
    final startHour = (currentHour - 10).clamp(0, 23);
    final endHour = currentHour;
    
    final Map<int, int> hourlyData = {};
    for (int i = startHour; i <= endHour; i++) {
      hourlyData[i] = 0;
    }
    
    for (final intake in _dayIntakes) {
      final hour = intake.dateTime.hour;
      if (hour >= startHour && hour <= endHour) {
        hourlyData[hour] = (hourlyData[hour] ?? 0) + intake.volumeML;
      }
    }

    final hasDataInRange = hourlyData.values.any((amount) => amount > 0);
    if (!hasDataInRange) return const SizedBox.shrink();

    return Container(
      margin: const EdgeInsets.all(16),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(25),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 20,
            offset: const Offset(0, 10),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              const Icon(Icons.show_chart, color: kBlue, size: 24),
              const SizedBox(width: 12),
              Expanded(
                child: Text('üìà –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å–∞–º (${startHour.toString().padLeft(2, '0')}:00 - ${endHour.toString().padLeft(2, '0')}:00)', 
                  style: const TextStyle(fontSize: 14, fontWeight: FontWeight.bold, color: kBlue),
                  overflow: TextOverflow.ellipsis,
                  maxLines: 2,
                ),
              ),
            ],
          ),
          const SizedBox(height: 20),
          
          Container(
            height: 200,
            padding: const EdgeInsets.only(right: 16, top: 16),
            child: LineChart(
              LineChartData(
                gridData: FlGridData(show: true, horizontalInterval: 200, verticalInterval: 1),
                titlesData: FlTitlesData(
                  bottomTitles: AxisTitles(
                    sideTitles: SideTitles(
                      showTitles: true,
                      interval: 1,
                      getTitlesWidget: (value, meta) {
                        final hour = value.toInt();
                        if (hour >= startHour && hour <= endHour) {
                          return Text('${hour}h', style: const TextStyle(fontSize: 10, color: kBlue));
                        }
                        return const SizedBox.shrink();
                      },
                    ),
                  ),
                  leftTitles: AxisTitles(
                    sideTitles: SideTitles(
                      showTitles: true,
                      interval: 200,
                      reservedSize: 40,
                      getTitlesWidget: (value, meta) {
                        return Text('${value.toInt()}–º–ª', style: const TextStyle(fontSize: 9, color: kBlue));
                      },
                    ),
                  ),
                  topTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),
                  rightTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),
                ),
                borderData: FlBorderData(show: true, border: Border.all(color: kBlue.withOpacity(0.2))),
                lineBarsData: [
                  LineChartBarData(
                    spots: hourlyData.entries.map((e) => FlSpot(e.key.toDouble(), e.value.toDouble())).toList(),
                    isCurved: true,
                    color: kBlue,
                    barWidth: 3,
                    belowBarData: BarAreaData(show: true, color: kBlue.withOpacity(0.1)),
                    dotData: const FlDotData(show: true),
                  ),
                ],
                minX: startHour.toDouble(),
                maxX: endHour.toDouble(),
                minY: 0,
                maxY: (hourlyData.values.isNotEmpty ? hourlyData.values.reduce((a, b) => a > b ? a : b) * 1.2 : 1000).toDouble(),
              ),
            ),
          ),
        ],
      ),
    );
  }

  /// üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è
  Widget _buildDayStats(int totalDay, int dailyGoal) {
    final percentage = totalDay / dailyGoal;
    final remaining = (dailyGoal - totalDay).clamp(0, dailyGoal);
    final averageIntake = _dayIntakes.isNotEmpty ? (totalDay / _dayIntakes.length).round() : 0;
    
    return Container(
      margin: const EdgeInsets.all(16),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(25),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 20,
            offset: const Offset(0, 10),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              const Icon(Icons.analytics, color: kBlue, size: 24),
              const SizedBox(width: 12),
              const Text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è', 
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: kBlue)),
            ],
          ),
          const SizedBox(height: 20),
          
          Row(
            children: [
              Expanded(
                child: _buildStatCard('üíß –í—ã–ø–∏—Ç–æ', '$totalDay –º–ª', Colors.blue, Icons.local_drink),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildStatCard('üéØ –¶–µ–ª—å', '$dailyGoal –º–ª', Colors.green, Icons.flag),
              ),
            ],
          ),
          
          const SizedBox(height: 12),
          
          Row(
            children: [
              Expanded(
                child: _buildStatCard('üìà –ü—Ä–æ–≥—Ä–µ—Å—Å', '${(percentage * 100).toInt()}%', 
                  percentage >= 1.0 ? Colors.green : Colors.orange, Icons.trending_up),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildStatCard('üîÑ –û—Å—Ç–∞–ª–æ—Å—å', '$remaining –º–ª', Colors.red, Icons.schedule),
              ),
            ],
          ),
          
          const SizedBox(height: 12),
          
          Row(
            children: [
              Expanded(
                child: _buildStatCard('üî¢ –ó–∞–ø–∏—Å–µ–π', '${_dayIntakes.length}', Colors.purple, Icons.format_list_numbered),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildStatCard('‚öñÔ∏è –°—Ä–µ–¥–Ω–µ–µ', '$averageIntake –º–ª', Colors.teal, Icons.equalizer),
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –¥–Ω—è
  Widget _buildDayIntakesList() {
    return Container(
      margin: const EdgeInsets.all(16),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(25),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 20,
            offset: const Offset(0, 10),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              const Icon(Icons.list_alt, color: kBlue, size: 24),
              const SizedBox(width: 12),
              const Text('üìã –ó–∞–ø–∏—Å–∏ –¥–Ω—è', 
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: kBlue)),
            ],
          ),
          const SizedBox(height: 16),
          
          ListView.separated(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            itemCount: _dayIntakes.length,
            separatorBuilder: (context, index) => Divider(color: Colors.grey.shade200),
            itemBuilder: (context, index) {
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ - –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–µ–º –≤–≤–µ—Ä—Ö—É
              final reversedIndex = _dayIntakes.length - 1 - index;
              final intake = _dayIntakes[reversedIndex];
              final time = DateFormat('HH:mm').format(intake.dateTime);
              
              return ListTile(
                contentPadding: EdgeInsets.zero,
                leading: Container(
                  width: 40,
                  height: 40,
                  decoration: BoxDecoration(
                    color: kBlue.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(20),
                  ),
                  child: const Icon(Icons.water_drop, color: kBlue, size: 20),
                ),
                title: Text('${intake.volumeML} –º–ª', 
                  style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),
                subtitle: Text('–í—Ä–µ–º—è: $time', 
                  style: TextStyle(color: Colors.grey.shade600, fontSize: 14)),
                trailing: Container(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: kBlue.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text('#${reversedIndex + 1}', 
                    style: const TextStyle(color: kBlue, fontWeight: FontWeight.w600, fontSize: 12)),
                ),
              );
            },
          ),
        ],
      ),
    );
  }

  /// üåü –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –¥–Ω—è
  Widget _buildEmptyDayState() {
    final isToday = isSameDay(_selectedDate, DateTime.now());
    
    return Container(
      margin: const EdgeInsets.all(16),
      padding: const EdgeInsets.all(40),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(25),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 20,
            offset: const Offset(0, 10),
          ),
        ],
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            isToday ? Icons.water_drop_outlined : Icons.calendar_today_outlined,
            size: 80,
            color: Colors.grey.shade400,
          ),
          const SizedBox(height: 20),
          Text(
            isToday ? 'üíß –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –≤–æ–¥–µ' : 'üìÖ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.w600,
              color: Colors.grey.shade600,
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 12),
          Text(
            isToday 
              ? '–ù–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!'
              : '–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
            style: TextStyle(
              fontSize: 14,
              color: Colors.grey.shade500,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
  
  /// üìä –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –º–µ—Å—è—Ü –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫
  Future<void> _showMonthStatistics(DateTime month) async {
    try {
      final userSettings = ref.read(userSettingsProvider);
      final dailyGoal = userSettings?.dailyNormML ?? 2000;
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤–µ—Å—å –º–µ—Å—è—Ü
      final monthIntakes = <WaterIntake>[];
      final startOfMonth = DateTime(month.year, month.month, 1);
      final endOfMonth = DateTime(month.year, month.month + 1, 0);
      
      for (DateTime date = startOfMonth; date.isBefore(endOfMonth.add(const Duration(days: 1))); date = date.add(const Duration(days: 1))) {
        final dayIntakes = await StorageService.getWaterIntakesForDate(date);
        monthIntakes.addAll(dayIntakes);
      }
      
      if (monthIntakes.isEmpty) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('üìÖ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü')),
          );
        }
        return;
      }
      
      final totalVolume = monthIntakes.fold(0, (sum, intake) => sum + intake.volumeML);
      final totalDays = endOfMonth.day;
      final daysWithWater = _monthlyData.length;
      final averagePerDay = (totalVolume / totalDays).round();
      final goalPercent = ((totalVolume / (dailyGoal * totalDays)) * 100).round();
      final maxDay = _monthlyData.values.isNotEmpty ? _monthlyData.values.reduce((a, b) => a > b ? a : b) : 0;
      
      if (mounted) {
        showDialog(
          context: context,
          builder: (context) => AlertDialog(
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
            title: Row(
              children: [
                const Icon(Icons.analytics, color: kBlue),
                const SizedBox(width: 12),
                Text('üìä ${DateFormat('MMMM yyyy', 'ru_RU').format(month)}', 
                  style: const TextStyle(color: kBlue, fontWeight: FontWeight.bold)),
              ],
            ),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // –û–±—â–∏–π –æ–±—ä–µ–º
                _buildStatRow('üíß –û–±—â–∏–π –æ–±—ä–µ–º:', '$totalVolume –º–ª'),
                const SizedBox(height: 8),
                
                // –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å
                _buildStatRow('üìä –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å:', '$averagePerDay –º–ª'),
                const SizedBox(height: 8),
                
                // –î–Ω–µ–π —Å –≤–æ–¥–æ–π
                _buildStatRow('üìÖ –î–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏:', '$daysWithWater –∏–∑ $totalDays'),
                const SizedBox(height: 8),
                
                // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏
                _buildStatRow('üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏:', '$goalPercent%'),
                const SizedBox(height: 8),
                
                // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ–Ω—å
                _buildStatRow('üèÜ –õ—É—á—à–∏–π –¥–µ–Ω—å:', '$maxDay –º–ª'),
                const SizedBox(height: 8),
                
                // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                _buildStatRow('üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:', '${monthIntakes.length}'),
                
                const SizedBox(height: 16),
                
                // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: (goalPercent >= 100 ? Colors.green : Colors.blue).withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(
                      color: (goalPercent >= 100 ? Colors.green : Colors.blue).withOpacity(0.3),
                    ),
                  ),
                  child: Text(
                    goalPercent >= 100 ? 
                      'üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¶–µ–ª—å –º–µ—Å—è—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!' :
                      goalPercent >= 75 ?
                        'üí™ –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!' :
                        goalPercent >= 50 ?
                          'üìà –ù–µ–ø–ª–æ—Ö–æ! –ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏!' :
                          'üíß –ü–æ—Ä–∞ –±–æ–ª—å—à–µ –ø–∏—Ç—å –≤–æ–¥—ã!',
                    style: TextStyle(
                      color: goalPercent >= 100 ? Colors.green : kBlue,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ],
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: const Text('–ó–∞–∫—Ä—ã—Ç—å', style: TextStyle(color: kBlue)),
              ),
            ],
          ),
        );
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ—Å—è—Ü–∞: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e')),
        );
      }
    }
  }
  
  /// üìä –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  Widget _buildStatRow(String label, String value) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(label, style: const TextStyle(fontSize: 14, fontWeight: FontWeight.w500)),
        Text(value, style: const TextStyle(fontSize: 14, fontWeight: FontWeight.bold, color: kBlue)),
      ],
    );
  }
}

/// üìä –ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–º–∏–Ω–∏)
Widget _buildStatCard(String title, String value, Color color, IconData icon) {
  return Container(
    padding: const EdgeInsets.all(12),
    decoration: BoxDecoration(
      gradient: LinearGradient(
        begin: Alignment.topLeft,
        end: Alignment.bottomRight,
        colors: [color.withOpacity(0.1), color.withOpacity(0.05)],
      ),
      borderRadius: BorderRadius.circular(12),
      border: Border.all(color: color.withOpacity(0.3)),
    ),
    child: Column(
      children: [
        Icon(icon, color: color, size: 24),
        const SizedBox(height: 8),
        Text(
          value,
          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold, color: color),
        ),
        const SizedBox(height: 4),
        Text(
          title,
          style: TextStyle(fontSize: 10, color: color.withOpacity(0.7)),
          textAlign: TextAlign.center,
        ),
      ],
    ),
  );
}
