import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/achievement.dart';
import '../models/water_intake.dart';
import '../services/storage_service.dart';

/// –°–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
enum AchievementEvent {
  waterAdded,      // –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤–æ–¥–∞
  dayGoalReached,  // —Ü–µ–ª—å –¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
  morningDrink,    // —É—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–∏–µ–º –≤–æ–¥—ã (–¥–æ 9:00)
  eveningDrink,    // –≤–µ—á–µ—Ä–Ω–∏–π –ø—Ä–∏–µ–º –≤–æ–¥—ã (–ø–æ—Å–ª–µ 18:00)
}

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
class AchievementsService extends ChangeNotifier {
  static const String _achievementsKey = 'achievements_data';
  static const String _userLevelKey = 'user_level';
  static const String _userXpKey = 'user_xp';
  static const String _currentStreakKey = 'current_streak';
  static const String _lastGoalDateKey = 'last_goal_date';

  List<Achievement> _achievements = [];
  int _userLevel = 1;
  int _userXp = 0;
  int _currentStreak = 0;
  DateTime? _lastGoalDate;
  
  // üöÄ –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  static int? _cachedTotalVolume;
  static DateTime? _cacheTime;

  // –ì–µ—Ç—Ç–µ—Ä—ã
  List<Achievement> get achievements => List.unmodifiable(_achievements);
  List<Achievement> get completedAchievements => _achievements.where((a) => a.isCompleted).toList();
  List<Achievement> get activeAchievements => _achievements.where((a) => a.isActive).toList();
  int get userLevel => _userLevel;
  int get userXp => _userXp;
  int get currentStreak => _currentStreak;
  int get nextLevelXp => _userLevel * 1000; // –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å = 1000 XP
  double get levelProgress => (_userXp % nextLevelXp) / nextLevelXp;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
  Future<void> initialize({int dailyNormML = 2000, bool forceReset = false}) async {
    debugPrint('üèÜ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: dailyNormML=$dailyNormML, forceReset=$forceReset');
    
    if (forceReset) {
      // üßπ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
      debugPrint('üßπ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
      await _clearAllData();
    }
    
    await _loadData();
    
    if (_achievements.isEmpty || forceReset) {
      // üéØ –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      debugPrint('üéØ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –Ω–æ—Ä–º—ã $dailyNormML');
      _achievements = DefaultAchievements.createForDailyNorm(dailyNormML).map((a) => 
        a.copyWith(status: AchievementStatus.active)).toList();
      await _saveData();
    } else {
      // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–æ—Ä–º—ã
      debugPrint('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
      await _updateDailyAchievementsForNorm(dailyNormML);
      
      // üé® –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –∏ –∏–∫–æ–Ω–∫–∏ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
      await _syncAchievementsWithTemplates(dailyNormML);
    }
    
    // üéñÔ∏è –û–î–ù–û–ö–†–ê–¢–ù–û–ï –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ XP –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏
    await _checkAndRecoverMissingXp();
    
    // üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø —Å —Ç–µ–∫—É—â–∏–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –≤–æ–¥—ã
    await _syncWithCurrentWaterIntake();
    
    debugPrint('üèÜ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê: ${_achievements.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    notifyListeners();
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –≤–æ–¥—ã –∑–∞ –¥–µ–Ω—å
  Future<void> _syncWithCurrentWaterIntake() async {
    try {
      final DateTime today = DateTime.now();
      
      // üîÑ –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –µ—Å–ª–∏ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å
      await _resetDailyAchievementsIfNeeded(today);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã
      final intakes = await StorageService.getWaterIntakesForDate(today);
      final todayTotal = intakes.fold(0, (sum, intake) => sum + intake.volumeML);
      
      debugPrint('üöÄ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –°–µ–≥–æ–¥–Ω—è –≤—ã–ø–∏—Ç–æ ${todayTotal}–º–ª');
      
      // üìä –†–ï–ê–õ–¨–ù–´–ô —Ä–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –æ–±—ä–µ–º–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      int totalVolume = 0;
      try {
        final allIntakes = await StorageService.loadWaterIntakes();
        totalVolume = allIntakes.fold(0, (sum, intake) => sum + intake.volumeML);
        debugPrint('üöÄ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –†–ï–ê–õ–¨–ù–´–ô –æ–±—â–∏–π –æ–±—ä–µ–º –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: ${totalVolume}–º–ª (${(totalVolume/1000).toStringAsFixed(1)}–ª)');
      } catch (e) {
        debugPrint('üöÄ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—â–µ–≥–æ –æ–±—ä–µ–º–∞: $e');
        totalVolume = todayTotal; // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      await handleEvent(AchievementEvent.waterAdded, data: {
        'amount': 0, // –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≤–æ–¥—É
        'todayTotal': todayTotal,
        'totalVolume': totalVolume, // –¢–û–ß–ù–´–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã!
        'isSync': true, // —Ñ–ª–∞–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      });
      
      debugPrint('üöÄ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê: –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è ${todayTotal}–º–ª —Å–µ–≥–æ–¥–Ω—è, ${totalVolume}–º–ª –≤—Å–µ–≥–æ');
      
    } catch (e) {
      debugPrint('üöÄ –û–®–ò–ë–ö–ê —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    }
  }

  /// –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  Future<void> _clearAllData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_achievementsKey);
      await prefs.remove(_userLevelKey);
      await prefs.remove(_userXpKey);  
      await prefs.remove(_currentStreakKey);
      await prefs.remove(_lastGoalDateKey);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      _achievements.clear();
      _userLevel = 1;
      _userXp = 0;
      _currentStreak = 0;
      _lastGoalDate = null;
      
      debugPrint('üßπ –í–°–ï –î–ê–ù–ù–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–ô –û–ß–ò–©–ï–ù–´');
    } catch (e) {
      debugPrint('üßπ –û–®–ò–ë–ö–ê –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: $e');
    }
  }

  /// –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –µ—Å–ª–∏ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å
  Future<void> _resetDailyAchievementsIfNeeded(DateTime today) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      const lastResetKey = 'achievements_last_daily_reset';
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞
      final lastResetString = prefs.getString(lastResetKey);
      final todayKey = _dateToKey(today);
      
      if (lastResetString == null || lastResetString != todayKey) {
        debugPrint('üîÑ –°–ë–†–û–°: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–±—Ä–æ—Å: $lastResetString, —Å–µ–≥–æ–¥–Ω—è: $todayKey');
        
        bool hasChanges = false;
        
        // üéñÔ∏è –°–û–•–†–ê–ù–Ø–ï–ú XP –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –≤—á–µ—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
        await _saveCompletedDailyAchievementsXp();
        
        for (int i = 0; i < _achievements.length; i++) {
          final achievement = _achievements[i];
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
          if (achievement.type == AchievementType.daily) {
            _achievements[i] = achievement.copyWith(
              currentValue: 0,
              status: AchievementStatus.active,
              completedAt: null,
            );
            hasChanges = true;
            debugPrint('üîÑ –°–ë–†–û–°: ${achievement.title} —Å–±—Ä–æ—à–µ–Ω–æ');
          }
        }
        
        if (hasChanges) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
          await _saveData();
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞
          await prefs.setString(lastResetKey, todayKey);
          
          debugPrint('üîÑ –°–ë–†–û–°: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å');
        }
      }
    } catch (e) {
      debugPrint('üîÑ –°–ë–†–û–°: –û–®–ò–ë–ö–ê —Å–±—Ä–æ—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: $e');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç XP –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
  Future<void> _saveCompletedDailyAchievementsXp() async {
    final completedDaily = _achievements.where((a) => 
      a.type == AchievementType.daily && a.isCompleted).toList();
    
    if (completedDaily.isNotEmpty) {
      debugPrint('üíé –°–û–•–†–ê–ù–ï–ù–ò–ï XP: –ù–∞–π–¥–µ–Ω–æ ${completedDaily.length} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
      
      for (final achievement in completedDaily) {
        debugPrint('üíé XP –∑–∞ "${achievement.title}": ${achievement.reward} XP —É–∂–µ –≤ –æ–±—â–µ–º –±–∞–ª–∞–Ω—Å–µ');
      }
      
      debugPrint('üíé –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–° XP: $_userXp (—É—Ä–æ–≤–µ–Ω—å: $_userLevel)');
    }
  }

  /// –û–±–Ω–æ–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã
  Future<void> _updateDailyAchievementsForNorm(int dailyNormML) async {
    bool needsUpdate = false;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–æ–≤–æ–π –Ω–æ—Ä–º—ã
    final updatedAchievements = <Achievement>[];
    
    for (final achievement in _achievements) {
      if (achievement.type == AchievementType.daily) {
        Achievement? updatedAchievement;
        
        switch (achievement.id) {
          case 'half_daily_goal':
            final newTarget = (dailyNormML * 0.5).round();
            if (achievement.targetValue != newTarget) {
              updatedAchievement = Achievement(
                id: achievement.id,
                title: achievement.title,
                description: '–í—ã–ø–µ–π 50% –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã (${newTarget}–º–ª)',
                icon: achievement.icon,
                color: achievement.color,
                type: achievement.type,
                targetValue: newTarget,
                currentValue: achievement.currentValue,
                status: achievement.status,
                reward: achievement.reward,
                completedAt: achievement.completedAt,
              );
              needsUpdate = true;
            }
            break;
            
          case 'daily_goal_100':
            final newTarget = dailyNormML;
            if (achievement.targetValue != newTarget) {
              updatedAchievement = Achievement(
                id: achievement.id,
                title: achievement.title,
                description: '–í—ã–ø–æ–ª–Ω–∏ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É (${newTarget}–º–ª)',
                icon: achievement.icon,
                color: achievement.color,
                type: achievement.type,
                targetValue: newTarget,
                currentValue: achievement.currentValue,
                status: achievement.status,
                reward: achievement.reward,
                completedAt: achievement.completedAt,
              );
              needsUpdate = true;
            }
            break;
            
          case 'super_hydrated_120':
            final newTarget = (dailyNormML * 1.2).round();
            if (achievement.targetValue != newTarget) {
              updatedAchievement = Achievement(
                id: achievement.id,
                title: achievement.title,
                description: '–ü—Ä–µ–≤—ã—Å–∏ –Ω–æ—Ä–º—É –Ω–∞ 20% (${newTarget}–º–ª)',
                icon: achievement.icon,
                color: achievement.color,
                type: achievement.type,
                targetValue: newTarget,
                currentValue: achievement.currentValue,
                status: achievement.status,
                reward: achievement.reward,
                completedAt: achievement.completedAt,
              );
              needsUpdate = true;
            }
            break;
        }
        
        updatedAchievements.add(updatedAchievement ?? achievement);
      } else {
        updatedAchievements.add(achievement);
      }
    }
    
    if (needsUpdate) {
      _achievements = updatedAchievements;
      await _saveData();
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±–Ω–æ–≤–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  Future<List<Achievement>> handleEvent(AchievementEvent event, {Map<String, dynamic>? data}) async {
    debugPrint('üèÜ –°–ï–†–í–ò–°: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ $event —Å –¥–∞–Ω–Ω—ã–º–∏: $data');
    
    List<Achievement> newlyCompleted = [];
    final now = DateTime.now();
    
    // üîÑ –ü—Ä–∏ –ª—é–±–æ–º —Å–æ–±—ã—Ç–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    await _resetDailyAchievementsIfNeeded(now);
    
    switch (event) {
      case AchievementEvent.waterAdded:
        final int amount = data?['amount'] ?? 0;
        final int todayTotal = data?['todayTotal'] ?? 0;
        final int totalVolume = data?['totalVolume'] ?? 0;
        
        debugPrint('üèÜ –°–ï–†–í–ò–°: waterAdded - amount:$amount, todayTotal:$todayTotal, totalVolume:$totalVolume');
        
        // –£—Ç—Ä–µ–Ω–Ω–∏–π/–≤–µ—á–µ—Ä–Ω–∏–π –ø—Ä–∏–µ–º
        final hour = now.hour;
        if (hour <= 9) {
          newlyCompleted.addAll(await _updateAchievement('morning_habit', 1));
        }
        if (hour >= 18) {
          newlyCompleted.addAll(await _updateAchievement('evening_habit', 1));
        }
        
        // –ü–µ—Ä–≤—ã–π –≥–ª–æ—Ç–æ–∫ –¥–Ω—è - –¢–û–õ–¨–ö–û –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–¥—ã (–Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
        final isSync = data?['isSync'] ?? false;
        if (todayTotal == amount && amount > 0 && !isSync) {
          debugPrint('üèÜ –°–ï–†–í–ò–°: –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–µ—Ä–≤—ã–π –≥–ª–æ—Ç–æ–∫ –¥–Ω—è! amount=$amount');
          final firstGlassResults = await _updateAchievement('first_glass', 250);
          newlyCompleted.addAll(firstGlassResults); // üéñÔ∏è –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è XP
        } else if (isSync && todayTotal > 0) {
          // –ü—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ë–ï–ó –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è XP
          await _updateAchievement('first_glass', 250, isSync: true);
        }
        
        // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ü–µ–ª–∏ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥ –Ω–æ—Ä–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        newlyCompleted.addAll(await _updateAchievement('half_daily_goal', todayTotal));
        newlyCompleted.addAll(await _updateAchievement('daily_goal_100', todayTotal));
        newlyCompleted.addAll(await _updateAchievement('super_hydrated_120', todayTotal));
        
        // –û–±—â–∏–π –æ–±—ä–µ–º
        newlyCompleted.addAll(await _updateAchievement('total_10l', totalVolume));
        newlyCompleted.addAll(await _updateAchievement('total_100l', totalVolume));
        
        break;
        
      case AchievementEvent.dayGoalReached:
        await _updateStreak();
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Å–µ—Ä–∏—è–º
        newlyCompleted.addAll(await _updateAchievement('streak_3_days', _currentStreak));
        newlyCompleted.addAll(await _updateAchievement('streak_7_days', _currentStreak));
        newlyCompleted.addAll(await _updateAchievement('streak_30_days', _currentStreak));
        break;
        
      case AchievementEvent.morningDrink:
      case AchievementEvent.eveningDrink:
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ waterAdded
        break;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º XP –∑–∞ –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (newlyCompleted.isNotEmpty) {
      final isSync = data?['isSync'] ?? false;
      
      // üèÜ XP –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∑–∞ –í–°–ï –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      for (final achievement in newlyCompleted) {
        await _addXp(achievement.reward);
        debugPrint('üéñÔ∏è XP –Ω–∞—á–∏—Å–ª–µ–Ω: +${achievement.reward} –∑–∞ "${achievement.title}". –í—Å–µ–≥–æ XP: $_userXp');
      }
      
      debugPrint('üèÜ –ò–¢–û–ì–û XP: $_userXp, –£—Ä–æ–≤–µ–Ω—å: $_userLevel');
      notifyListeners();
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    final isSync = data?['isSync'] ?? false;
    return isSync ? [] : newlyCompleted;
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  Future<List<Achievement>> _updateAchievement(String id, int newValue, {bool isSync = false}) async {
    debugPrint('üèÜ –°–ï–†–í–ò–°: _updateAchievement($id, $newValue)');
    
    final index = _achievements.indexWhere((a) => a.id == id);
    if (index == -1) {
      debugPrint('üèÜ –°–ï–†–í–ò–°: –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ $id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
      return [];
    }
    
    if (_achievements[index].isCompleted) {
      debugPrint('üèÜ –°–ï–†–í–ò–°: –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ $id —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
      return [];
    }
    
    final achievement = _achievements[index];
    debugPrint('üèÜ –°–ï–†–í–ò–°: –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å ${achievement.title}: ${achievement.currentValue}/${achievement.targetValue}');
    
    final updatedValue = achievement.type == AchievementType.streak 
      ? newValue // –¥–ª—è —Å–µ—Ä–∏–π –±–µ—Ä–µ–º —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      : newValue.clamp(0, achievement.targetValue); // –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ü–µ–ª—å—é
    
    debugPrint('üèÜ –°–ï–†–í–ò–°: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: $updatedValue');
    
    if (updatedValue > achievement.currentValue) {
      final isNewlyCompleted = updatedValue >= achievement.targetValue && !achievement.isCompleted;
      
      debugPrint('üèÜ –°–ï–†–í–ò–°: –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å. –ó–∞–≤–µ—Ä—à–µ–Ω–æ: $isNewlyCompleted');
      
      _achievements[index] = achievement.copyWith(
        currentValue: updatedValue,
        status: isNewlyCompleted ? AchievementStatus.completed : AchievementStatus.active,
        completedAt: isNewlyCompleted ? DateTime.now() : null,
      );
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      await _saveData();
      notifyListeners();
      
      if (isNewlyCompleted) {
        debugPrint('üèÜ –°–ï–†–í–ò–°: ‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "${achievement.title}" –ó–ê–í–ï–†–®–ï–ù–û! –ù–∞–≥—Ä–∞–¥–∞: ${achievement.reward} XP');
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ XP, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–¥—ã
        return [_achievements[index]];
      } else {
        debugPrint('üèÜ –°–ï–†–í–ò–°: ‚è≥ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "${achievement.title}" –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedValue}/${achievement.targetValue}');
      }
    } else {
      debugPrint('üèÜ –°–ï–†–í–ò–°: –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
    }
    
    return [];
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–∏ –¥–Ω–µ–π
  Future<void> _updateStreak() async {
    final today = DateTime.now();
    final todayKey = _dateToKey(today);
    final lastGoalKey = _lastGoalDate != null ? _dateToKey(_lastGoalDate!) : '';
    
    if (lastGoalKey.isEmpty) {
      // –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å —Å–µ—Ä–∏–∏
      _currentStreak = 1;
    } else if (todayKey == lastGoalKey) {
      // –£–∂–µ –∑–∞—Å—á–∏—Ç–∞–Ω —Å–µ–≥–æ–¥–Ω—è
      return;
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—á–µ—Ä–∞
      final yesterday = today.subtract(const Duration(days: 1));
      final yesterdayKey = _dateToKey(yesterday);
      
      if (lastGoalKey == yesterdayKey) {
        _currentStreak++;
      } else {
        _currentStreak = 1; // —Å–µ—Ä–∏—è –ø—Ä–µ—Ä–≤–∞–ª–∞—Å—å
      }
    }
    
    _lastGoalDate = today;
  }

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ XP –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
  Future<void> _addXp(int xp) async {
    final oldLevel = _userLevel;
    final oldXp = _userXp;
    _userXp += xp;
    
    debugPrint('üíé XP –ù–ê–ß–ò–°–õ–ï–ù: +$xp (–±—ã–ª–æ: $oldXp ‚Üí —Å—Ç–∞–ª–æ: $_userXp)');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    while (_userXp >= nextLevelXp) {
      _userLevel++;
      debugPrint('üéâ –£–†–û–í–ï–ù–¨ –ü–û–í–´–®–ï–ù! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: $_userLevel (–±—ã–ª–æ: $oldLevel)');
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º XP —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    await _saveData();
    debugPrint('üíæ XP –°–û–•–†–ê–ù–ï–ù: $_userXp (—É—Ä–æ–≤–µ–Ω—å: $_userLevel)');
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ ID
  Achievement? getAchievementById(String id) {
    try {
      return _achievements.firstWhere((a) => a.id == id);
    } catch (e) {
      return null;
    }
  }

  /// –°–±—Ä–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  Future<void> resetAchievement(String id) async {
    final index = _achievements.indexWhere((a) => a.id == id);
    if (index != -1) {
      final achievement = _achievements[index];
      _achievements[index] = achievement.copyWith(
        currentValue: 0,
        status: AchievementStatus.active,
        completedAt: null,
      );
      await _saveData();
      notifyListeners();
    }
  }

  /// üé® –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ –∏ –∏–∫–æ–Ω–æ–∫ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
  Future<void> _syncAchievementsWithTemplates(int dailyNormML) async {
    debugPrint('üé® –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∏ –∏–∫–æ–Ω–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
    
    final templates = DefaultAchievements.createForDailyNorm(dailyNormML);
    bool hasChanges = false;
    
    for (int i = 0; i < _achievements.length; i++) {
      final currentAchievement = _achievements[i];
      
      // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω
      final template = templates.firstWhere(
        (t) => t.id == currentAchievement.id,
        orElse: () => currentAchievement, // –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      );
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      if (currentAchievement.color != template.color || 
          currentAchievement.icon != template.icon ||
          currentAchievement.title != template.title ||
          currentAchievement.description != template.description) {
        
        debugPrint('üé® –û–±–Ω–æ–≤–ª—è–µ–º "${currentAchievement.title}" - –Ω–æ–≤—ã–π —Ü–≤–µ—Ç: ${template.color}');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–≥—Ä–µ—Å—Å
        _achievements[i] = currentAchievement.copyWith(
          title: template.title,
          description: template.description,
          icon: template.icon,
          color: template.color,
        );
        
        hasChanges = true;
      }
    }
    
    if (hasChanges) {
      await _saveData();
      debugPrint('üé® –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê: —Ü–≤–µ—Ç–∞ –∏ –∏–∫–æ–Ω–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } else {
      debugPrint('üé® –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è');
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π XP (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
  Future<void> _checkAndRecoverMissingXp() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      const xpRecoveryKey = 'achievements_xp_recovered';
      
      final isRecovered = prefs.getBool(xpRecoveryKey) ?? false;
      
      if (!isRecovered) {
        debugPrint('üéñÔ∏è –ü–ï–†–í–´–ô –ó–ê–ü–£–°–ö: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º XP –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏');
        await recoverMissingXpFromHistory();
        
        // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        await prefs.setBool(xpRecoveryKey, true);
        debugPrint('üéñÔ∏è XP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π');
      } else {
        debugPrint('üéñÔ∏è XP —É–∂–µ –±—ã–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ');
      }
    } catch (e) {
      debugPrint('üö® –û–®–ò–ë–ö–ê –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è XP: $e');
    }
  }

  /// üéñÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ XP –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏
  Future<void> recoverMissingXpFromHistory() async {
    try {
      debugPrint('üîç –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï XP: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã');
      
      final allIntakes = await StorageService.loadWaterIntakes();
      final dailyNormML = 2000; // –±–∞–∑–æ–≤–∞—è –Ω–æ—Ä–º–∞, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
      final Map<String, List<WaterIntake>> dailyIntakes = {};
      for (final intake in allIntakes) {
        final dayKey = _dateToKey(intake.dateTime);
        dailyIntakes[dayKey] ??= [];
        dailyIntakes[dayKey]!.add(intake);
      }
      
      int recoveredXp = 0;
      final today = _dateToKey(DateTime.now());
      
      debugPrint('üîç –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï XP: –ù–∞–π–¥–µ–Ω–æ ${dailyIntakes.length} –¥–Ω–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏');
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å (–∫—Ä–æ–º–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ)
      for (final entry in dailyIntakes.entries) {
        final dayKey = entry.key;
        final intakes = entry.value;
        
        if (dayKey == today) continue; // –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        
        final dayTotal = intakes.fold<int>(0, (sum, intake) => sum + intake.volumeML);
        debugPrint('üîç $dayKey: –≤—ã–ø–∏—Ç–æ ${dayTotal}–º–ª');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
        int dayXp = 0;
        
        // –ü–µ—Ä–≤—ã–π –≥–ª–æ—Ç–æ–∫ (50 XP)
        if (dayTotal > 0) {
          dayXp += 50;
          debugPrint('  ‚úÖ –ü–µ—Ä–≤—ã–π –≥–ª–æ—Ç–æ–∫: +50 XP');
        }
        
        // –ù–∞ –ø–æ–ª–ø—É—Ç–∏ –∫ —Ü–µ–ª–∏ (100 XP)
        if (dayTotal >= dailyNormML * 0.5) {
          dayXp += 100;
          debugPrint('  ‚úÖ –ù–∞ –ø–æ–ª–ø—É—Ç–∏: +100 XP');
        }
        
        // –ú–∞—Å—Ç–µ—Ä –≥–∏–¥—Ä–∞—Ü–∏–∏ - –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ (250 XP)
        if (dayTotal >= dailyNormML) {
          dayXp += 250;
          debugPrint('  ‚úÖ –ú–∞—Å—Ç–µ—Ä –≥–∏–¥—Ä–∞—Ü–∏–∏: +250 XP');
        }
        
        // –°—É–ø–µ—Ä —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ - 120% –Ω–æ—Ä–º—ã (350 XP)
        if (dayTotal >= dailyNormML * 1.2) {
          dayXp += 350;
          debugPrint('  ‚úÖ –°—É–ø–µ—Ä —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ: +350 XP');
        }
        
        recoveredXp += dayXp;
        debugPrint('  üìä XP –∑–∞ $dayKey: $dayXp');
      }
      
      if (recoveredXp > 0) {
        final oldXp = _userXp;
        _userXp += recoveredXp;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        while (_userXp >= nextLevelXp) {
          _userLevel++;
        }
        
        await _saveData();
        debugPrint('üéâ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û XP: +$recoveredXp (–±—ã–ª–æ: $oldXp ‚Üí —Å—Ç–∞–ª–æ: $_userXp)');
        debugPrint('üéâ –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: $_userLevel');
        
        notifyListeners();
      } else {
        debugPrint('üîç –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï XP: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏');
      }
      
    } catch (e) {
      debugPrint('üö® –û–®–ò–ë–ö–ê –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è XP: $e');
    }
  }

  /// –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã
  Future<void> resetAllAchievements({int dailyNormML = 2000}) async {
    debugPrint('üîÑ –°–ë–†–û–° –í–°–ï–• –î–û–°–¢–ò–ñ–ï–ù–ò–ô –¥–ª—è –Ω–æ—Ä–º—ã $dailyNormML');
    await initialize(dailyNormML: dailyNormML, forceReset: true);
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SharedPreferences
  Future<void> _loadData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      final achievementsJson = prefs.getString(_achievementsKey);
      if (achievementsJson != null) {
        final List<dynamic> list = json.decode(achievementsJson);
        _achievements = list.map((item) => Achievement.fromJson(item)).toList();
      }
      
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
      _userLevel = prefs.getInt(_userLevelKey) ?? 1;
      _userXp = prefs.getInt(_userXpKey) ?? 0;
      _currentStreak = prefs.getInt(_currentStreakKey) ?? 0;
      
      final lastGoalTimestamp = prefs.getInt(_lastGoalDateKey);
      _lastGoalDate = lastGoalTimestamp != null 
        ? DateTime.fromMillisecondsSinceEpoch(lastGoalTimestamp)
        : null;
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: $e');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ SharedPreferences
  Future<void> _saveData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      final achievementsJson = json.encode(_achievements.map((a) => a.toJson()).toList());
      await prefs.setString(_achievementsKey, achievementsJson);
      
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
      await prefs.setInt(_userLevelKey, _userLevel);
      await prefs.setInt(_userXpKey, _userXp);
      await prefs.setInt(_currentStreakKey, _currentStreak);
      
      if (_lastGoalDate != null) {
        await prefs.setInt(_lastGoalDateKey, _lastGoalDate!.millisecondsSinceEpoch);
      }
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: $e');
    }
  }

  /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  String _dateToKey(DateTime date) => '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}';
}
