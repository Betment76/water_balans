import 'dart:convert';
import 'dart:io';
// import 'package:path_provider/path_provider.dart'; // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
import 'package:shared_preferences/shared_preferences.dart';
import '../models/user_settings.dart';
import '../models/water_intake.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º (shared_preferences)
class StorageService {
  static const String _userSettingsKey = 'user_settings';
  static const String _waterIntakesKey = 'water_intakes';
  static const String _isFirstLaunchKey = 'is_first_launch';
  static const String _isProUserKey = 'is_pro_user';
  
  // üöÄ –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  static List<WaterIntake>? _cachedWaterIntakes;
  static DateTime? _cacheTime;
  static const Duration _cacheTimeout = Duration(minutes: 5); // –ö—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<void> saveUserSettings(UserSettings settings) async {
    final prefs = await SharedPreferences.getInstance();
    final jsonStr = jsonEncode(settings.toJson());
    await prefs.setString(_userSettingsKey, jsonStr);

    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å path_provider
    // await _saveBackupToFile('user_settings_backup.json', settings.toJson());
    print('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ SharedPreferences');
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<UserSettings?> loadUserSettings() async {
    final prefs = await SharedPreferences.getInstance();
    final jsonStr = prefs.getString(_userSettingsKey);

    if (jsonStr != null) {
      print('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ SharedPreferences: $jsonStr');
      return UserSettings.fromJson(jsonDecode(jsonStr));
    }

    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ —Ñ–∞–π–ª–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å path_provider
    /*
    // –ï—Å–ª–∏ –≤ SharedPreferences –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–∞–π–ª
    print(
      '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ SharedPreferences, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–∞–π–ª...',
    );
    final backupData = await _loadBackupFromFile('user_settings_backup.json');

    if (backupData != null) {
      print('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞!');
      final settings = UserSettings.fromJson(backupData);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ SharedPreferences
      await saveUserSettings(settings);
      return settings;
    }
    */

    print('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ SharedPreferences');
    return null;
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–æ–¥—ã
  static Future<void> saveWaterIntakes(List<WaterIntake> list) async {
    final prefs = await SharedPreferences.getInstance();
    final jsonList = list.map((e) => e.toJson()).toList();
    await prefs.setString(_waterIntakesKey, jsonEncode(jsonList));

    // üöÄ –û–ë–ù–û–í–õ–Ø–ï–ú –ö–≠–® –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    _cachedWaterIntakes = List.from(list);
    _cacheTime = DateTime.now();

    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å path_provider
    // await _saveBackupToFile('water_intakes_backup.json', {'intakes': jsonList});
    print('–ò—Å—Ç–æ—Ä–∏—è –≤–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ SharedPreferences');
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–æ–¥—ã (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º!)
  static Future<List<WaterIntake>> loadWaterIntakes() async {
    // üöÄ –ü–†–û–í–ï–†–Ø–ï–ú –ö–≠–® –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑ SharedPreferences
    if (_cachedWaterIntakes != null && _cacheTime != null) {
      final now = DateTime.now();
      if (now.difference(_cacheTime!) < _cacheTimeout) {
        print('üìä –ò—Å—Ç–æ—Ä–∏—è –≤–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ö–≠–®–ê (${_cachedWaterIntakes!.length} –∑–∞–ø–∏—Å–µ–π)');
        return List.from(_cachedWaterIntakes!);
      }
    }

    // üíæ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ SharedPreferences –µ—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    final prefs = await SharedPreferences.getInstance();
    final jsonStr = prefs.getString(_waterIntakesKey);

    if (jsonStr != null) {
      print('üíæ –ò—Å—Ç–æ—Ä–∏—è –≤–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ SharedPreferences');
      final List<dynamic> jsonList = jsonDecode(jsonStr);
      final waterIntakes = jsonList.map((e) => WaterIntake.fromJson(e)).toList();
      
      // üöÄ –°–û–•–†–ê–ù–Ø–ï–ú –í –ö–≠–®
      _cachedWaterIntakes = List.from(waterIntakes);
      _cacheTime = DateTime.now();
      
      return waterIntakes;
    }

    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ —Ñ–∞–π–ª–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å path_provider
    /*
    // –ï—Å–ª–∏ –≤ SharedPreferences –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–∞–π–ª
    print(
      '–ò—Å—Ç–æ—Ä–∏—è –≤–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ SharedPreferences, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–∞–π–ª...',
    );
    final backupData = await _loadBackupFromFile('water_intakes_backup.json');

    if (backupData != null && backupData['intakes'] != null) {
      print('–ò—Å—Ç–æ—Ä–∏—è –≤–æ–¥—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞!');
      final List<dynamic> jsonList = backupData['intakes'];
      final intakes = jsonList.map((e) => WaterIntake.fromJson(e)).toList();
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ SharedPreferences
      await saveWaterIntakes(intakes);
      return intakes;
    }
    */

    print('–ò—Å—Ç–æ—Ä–∏—è –≤–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return [];
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
  static Future<bool> isFirstLaunch() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool(_isFirstLaunchKey) ?? true;
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
  static Future<void> setFirstLaunch(bool value) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(_isFirstLaunchKey, value);
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Pro —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<bool> isProUser() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool(_isProUserKey) ?? false;
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Pro —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<void> setProUser(bool value) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(_isProUserKey, value);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –≤–æ–¥—ã –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É
  static Future<List<WaterIntake>> getWaterIntakesForDate(DateTime date) async {
    final allIntakes = await loadWaterIntakes();
    final startOfDay = DateTime(date.year, date.month, date.day);
    final endOfDay = startOfDay.add(const Duration(days: 1));

    return allIntakes.where((intake) {
      return intake.dateTime.isAfter(startOfDay) &&
          intake.dateTime.isBefore(endOfDay);
    }).toList();
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤–æ–¥—ã
  static Future<void> updateWaterIntake(WaterIntake intake) async {
    final allIntakes = await loadWaterIntakes();
    final index = allIntakes.indexWhere((item) => item.id == intake.id);

    if (index != -1) {
      allIntakes[index] = intake;
      await saveWaterIntakes(allIntakes); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç –∫—ç—à
    }
  }

  /// –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –≤–æ–¥—ã
  static Future<void> deleteWaterIntake(String id) async {
    final allIntakes = await loadWaterIntakes();
    allIntakes.removeWhere((item) => item.id == id);
    await saveWaterIntakes(allIntakes); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç –∫—ç—à
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  static Future<void> clearAllData() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.clear();
    
    // üöÄ –û–ß–ò–©–ê–ï–ú –ö–≠–® –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ
    _cachedWaterIntakes = null;
    _cacheTime = null;
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  static Future<void> debugShowAllKeys() async {
    final prefs = await SharedPreferences.getInstance();
    final keys = prefs.getKeys();
    print('–í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏: $keys');
    for (final key in keys) {
      final value = prefs.get(key);
      print('$key: $value');
    }
  }

  /*
  /// –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  static Future<File> _getBackupFile(String filename) async {
    // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –æ—á–∏—â–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–µ
    try {
      final directory = await getExternalStorageDirectory();
      if (directory != null) {
        final backupDir = Directory('${directory.path}/water_balance_backup');
        if (!await backupDir.exists()) {
          await backupDir.create(recursive: true);
        }
        return File('${backupDir.path}/$filename');
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–Ω–µ—à–Ω–µ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â—É: $e');
    }

    // Fallback –∫ Documents –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    final directory = await getApplicationDocumentsDirectory();
    return File('${directory.path}/$filename');
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
  static Future<void> _saveBackupToFile(
    String filename,
    Map<String, dynamic> data,
  ) async {
    try {
      final file = await _getBackupFile(filename);
      await file.writeAsString(jsonEncode(data));
      print('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${file.path}');
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: $e');
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
  static Future<Map<String, dynamic>?> _loadBackupFromFile(
    String filename,
  ) async {
    try {
      final file = await _getBackupFile(filename);
      if (await file.exists()) {
        final content = await file.readAsString();
        print('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–∞–π–¥–µ–Ω–∞: ${file.path}');
        return jsonDecode(content);
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: $e');
    }
    return null;
  }
  */
}
